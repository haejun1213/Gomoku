-- USERS 테이블
CREATE TABLE USERS (
    USER_ID              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,   -- 계정이 생성될 때 구분을 위해 번호 할당
    EMAIL                VARCHAR2(100) NULL,                                    -- 로그인에 사용할 email
    PASSWORD             VARCHAR2(255),                                         
    NICKNAME             VARCHAR2(50) NOT NULL,                                   
    FACE_ENCODING CLOB NULL,
    PROFILE_IMAGE        VARCHAR2(255),                                         -- 프로필 사진 url
    IS_SOCIAL_LOGIN      CHAR(1) DEFAULT 'N' NOT NULL,                          -- 소셜 로그인 연동 계정인지 아닌지
    SOCIAL_TYPE          VARCHAR2(20),                                          -- KAKAO, GOOGLE 등 소셜 로그인 플렛폼이 어딘지
    SOCIAL_ID            VARCHAR2(100),                                         -- 소셜 로그인 할 때 필요한 키값
    ROLE                 CHAR(1) DEFAULT 'C' NOT NULL,                          -- C 일반 사용자, A 관리자, B ai(Bot), G gest
    IS_ACTIVE            CHAR(1) DEFAULT 'Y' NOT NULL,                          -- 활동 가능인지 아닌지(나중에 활동 정지에 사용)
    JOINED_DATE          DATE DEFAULT SYSDATE NOT NULL,                         -- 가입일
    LAST_LOGIN_DATETIME  DATE,                                                  -- 마지막 접속일
    
    CONSTRAINT UQ_USERS_SOCIAL UNIQUE (SOCIAL_TYPE, SOCIAL_ID)
);

ALTER TABLE USERS ADD (
    FACE_ENCODING CLOB NULL
);

SELECT *
  FROM USERS;
  
delete from users
  where user_id = 1;

drop table USERS;
drop table GAME_ROOMS;

-- --게스트 유저 삭제
--DELETE FROM USERS
--WHERE ROLE = 'G'
--  AND LAST_LOGIN_DATETIME < SYSDATE - (30 / 1440)  -- 30분 전
--  AND USER_ID NOT IN (
--    SELECT DISTINCT USER_ID FROM GAME_HISTORY
--  );

select *
  from Game_rooms;
  
select *
  from ROOM_PARTICIPANTS;
  
UPDATE GAME_ROOMS
    SET STATUS = 'PLAYING'
    WHERE ROOM_ID = 276;  
  
  update Game_rooms
     SET IS_PRIVATE = 'N'
   WHERE ROOM_ID = 104;
   
   delete from Game_rooms
      where ROOM_ID = 276;
-- GAME_ROOMS
CREATE TABLE GAME_ROOMS (
    ROOM_ID              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TITLE                VARCHAR2(100),
    HOST_USER_ID         NUMBER NOT NULL,
    STATUS               VARCHAR2(20) DEFAULT 'WAITING',                        -- WAITING : 대기중, PLAYING : 게임중, FINISHED : 종료
    --INVITE_CODE          VARCHAR2(12) UNIQUE,
    CREATED_DATETIME     DATE DEFAULT SYSDATE,
    MAX_PARTICIPANTS NUMBER DEFAULT 8 NOT NULL,
    IS_PRIVATE CHAR(1) DEFAULT 'N' NOT NULL,
    
    CONSTRAINT FK_GAME_ROOMS_HOST FOREIGN KEY (HOST_USER_ID) REFERENCES USERS(USER_ID)
);

ALTER TABLE GAME_ROOMS
DROP COLUMN INVITE_CODE;


SELECT
        gr.ROOM_ID,
        gr.TITLE,
        gr.HOST_USER_ID,
        gr.STATUS,
        gr.INVITE_CODE,
        gr.CREATED_DATETIME,
        gr.MAX_PARTICIPANTS,
        gr.IS_PRIVATE,
        NVL(pc.count, 0) as currentParticipants
    FROM
        GAME_ROOMS gr
    LEFT JOIN
        (SELECT ROOM_ID, COUNT(*) as count FROM ROOM_PARTICIPANTS GROUP BY ROOM_ID) pc
    ON 
        gr.ROOM_ID = pc.ROOM_ID
    WHERE
        gr.STATUS = 'WAITING'
        AND gr.IS_PRIVATE = 'N'
        AND NVL(pc.count, 0) < gr.MAX_PARTICIPANTS
    ORDER BY
        gr.CREATED_DATETIME DESC;


ALTER TABLE GAME_ROOMS ADD (
    MAX_PARTICIPANTS NUMBER DEFAULT 8 NOT NULL,
    IS_PRIVATE CHAR(1) DEFAULT 'N' NOT NULL
);

-- ROOM_PARTICIPANTS
CREATE TABLE ROOM_PARTICIPANTS (
    ROOM_ID           NUMBER NOT NULL,
    USER_ID           NUMBER NOT NULL,
    ROLE              VARCHAR2(20),                                             -- 구분. 방장, 대전자, 관전자
    JOINED_DATETIME   DATE DEFAULT SYSDATE,

    CONSTRAINT PK_ROOM_PARTICIPANTS PRIMARY KEY (ROOM_ID, USER_ID),
    CONSTRAINT FK_ROOM_PARTICIPANTS_ROOM FOREIGN KEY (ROOM_ID) REFERENCES GAME_ROOMS(ROOM_ID) ON DELETE CASCADE,
    CONSTRAINT FK_ROOM_PARTICIPANTS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

select *
  from ROOM_PARTICIPANTS;

select *
  from GAME_HISTORY;

-- GAME_HISTORY
CREATE TABLE GAME_HISTORY (
    GAME_ID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROOM_ID         NUMBER NULL, 
    BLACK_USER_ID   NUMBER,
    WHITE_USER_ID   NUMBER,
    WINNER_ID       NUMBER,
    START_DATETIME  DATE DEFAULT SYSDATE NOT NULL,
    END_DATETIME    DATE,

    CONSTRAINT FK_GAME_HISTORY_ROOM FOREIGN KEY (ROOM_ID) 
        REFERENCES GAME_ROOMS(ROOM_ID) ON DELETE SET NULL,
    CONSTRAINT FK_GAME_HISTORY_BLACK_USER FOREIGN KEY (BLACK_USER_ID) 
        REFERENCES USERS(USER_ID) ON DELETE SET NULL,
    CONSTRAINT FK_GAME_HISTORY_WHITE_USER FOREIGN KEY (WHITE_USER_ID) 
        REFERENCES USERS(USER_ID) ON DELETE SET NULL,
    CONSTRAINT FK_GAME_HISTORY_WINNER_USER FOREIGN KEY (WINNER_ID) 
        REFERENCES USERS(USER_ID) ON DELETE SET NULL
);

ALTER TABLE GAME_HISTORY MODIFY (ROOM_ID NUMBER NULL);


select *
  from GAME_HISTORY;
SELECT
        h.GAME_ID,
        h.START_DATETIME,
        h.WINNER_ID,
        h.BLACK_USER_ID,
        h.WHITE_USER_ID,
        black_user.NICKNAME as blackPlayerNickname,
        white_user.NICKNAME as whitePlayerNickname,
        
        CASE
            WHEN h.BLACK_USER_ID = 42 THEN 'BLACK'
            ELSE 'WHITE'
        END as myColor,
        CASE
            WHEN h.WINNER_ID = 42 THEN '승리'
            WHEN h.WINNER_ID IS NULL THEN '무승부'
            ELSE '패배'
        END as result
    FROM
        GAME_HISTORY h
    LEFT JOIN
        USERS black_user ON h.BLACK_USER_ID = black_user.USER_ID
    LEFT JOIN
        USERS white_user ON h.WHITE_USER_ID = white_user.USER_ID
    WHERE
        h.GAME_ID = 1
        AND (h.BLACK_USER_ID = 82 OR h.WHITE_USER_ID = 42);


-- GAME_MOVES
CREATE TABLE GAME_MOVES (
    MOVE_ID           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GAME_ID           NUMBER NOT NULL,
    MOVE_ORDER        NUMBER NOT NULL,
    X_COORD           NUMBER NOT NULL,
    Y_COORD           NUMBER NOT NULL,
    COLOR             VARCHAR2(10) NOT NULL,
    PLAYED_DATETIME   DATE DEFAULT SYSDATE,

    CONSTRAINT FK_GAME_MOVES_GAME FOREIGN KEY (GAME_ID) REFERENCES GAME_HISTORY(GAME_ID) ON DELETE CASCADE
);

select *
  from GAME_MOVES;


SELECT 
        MOVE_ID, GAME_ID, MOVE_ORDER, X_COORD, Y_COORD, COLOR
    FROM 
        GAME_MOVES
    WHERE 
        GAME_ID = 27
    ORDER BY 
        MOVE_ORDER ASC;
-- ROOM_CHAT
CREATE TABLE ROOM_CHAT (
    CHAT_ID           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROOM_ID           NUMBER NOT NULL,
    USER_ID           NUMBER NOT NULL,
    MESSAGE           VARCHAR2(1000),
    SENT_DATETIME     DATE DEFAULT SYSDATE,

    CONSTRAINT FK_ROOM_CHAT_ROOM FOREIGN KEY (ROOM_ID) REFERENCES GAME_ROOMS(ROOM_ID) ON DELETE CASCADE,
    CONSTRAINT FK_ROOM_CHAT_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- USER_REPORTS
CREATE TABLE USER_REPORTS (
    REPORT_ID           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    REPORTER_ID         NUMBER NOT NULL,
    TARGET_ID           NUMBER NOT NULL,
    REASON              VARCHAR2(500),
    STATUS              VARCHAR2(20) DEFAULT 'PENDING',
    CREATED_DATETIME    DATE DEFAULT SYSDATE,

    CONSTRAINT FK_USER_REPORTS_REPORTER FOREIGN KEY (REPORTER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_USER_REPORTS_TARGET FOREIGN KEY (TARGET_ID) REFERENCES USERS(USER_ID)
);

select *
  from USER_REPORTS;
-- 









